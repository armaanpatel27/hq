from mcp.server.fastmcp import FastMCP
import sys
import os

# Add the backend directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from tool_services.email_service import EmailService

mcp = FastMCP(
    name="main_server",
)

@mcp.tool("add_numbers")
def add_numbers(a: float, b: float) -> float:
    """
    Add two numbers together.

    Args:
        a (float): The first number.
        b (float): The second number.

    Returns:
        float: The sum of the two input numbers.

    Raises:
        ValueError: If inputs are not valid numbers (in stricter implementations).

    Note:
        This tool performs a simple arithmetic addition.
        - Inputs must be numeric (int or float).
        - Useful when a user requests a calculation or addition task.
    """
    return a + b


@mcp.tool("send_email")
def send_email(to: str, body: str, subject: str, cc: list[str] = None, bcc: list[str] = None) -> dict:
    """
    Send an email to specified recipients with optional CC and BCC. Make the body of the email very concise and short. Make the subject very short(2-4 words)

    Args:
        to (str): The primary recipient's name.
        body (str): The content of the email generated by LLM.
        subject (str): The subject line of the email.
        cc (list[str], optional): List of CC recipients' names. Defaults to None.
        bcc (list[str], optional): List of BCC recipients' names. Defaults to None.

    Returns:
        dict: A dictionary containing either:
            - Success message with status and details
            - Error message with status and error details

    Note:
        This tool handles email sending functionality.
        - All email addresses should be valid and properly formatted.
        - CC and BCC lists are optional.
        - The body content is expected to be LLM-generated.
        - The subject line should be relevant to the email content.
    """
    email_service = EmailService()
    return email_service.send_email(to, subject, body, cc, bcc)

if __name__ == "__main__":
    mcp.run(transport="stdio")